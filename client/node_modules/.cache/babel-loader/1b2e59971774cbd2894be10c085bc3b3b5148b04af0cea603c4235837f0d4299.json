{"ast":null,"code":"var _jsxFileName = \"/Users/magomed/WebstormProjects/MMOGameMAI/client/src/GameScreen.js\",\n  _s = $RefreshSig$();\n// client/src/GameScreen.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport ProfessionSelection from './ProfessionSelection';\nimport GoldExchange from \"./GoldExchange\";\nimport Sell from \"./Sell\";\nimport Buy from \"./Buy\";\nimport TradeList from \"./TradeList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameScreen({\n  userId\n}) {\n  _s();\n  const [profession, setProfession] = useState('');\n  const [resources, setResources] = useState({\n    level: 0,\n    resource0: 0,\n    resource1: 0,\n    resource2: 0,\n    resource3: 0\n  });\n  const [error, setError] = useState('');\n  const [mess, setmess] = useState('');\n  let pushed = 0;\n  const fetchUserData = async () => {\n    try {\n      const response = await fetch(`http://localhost:4000/game/resources/${userId}`);\n      const data = await response.json();\n      if (response.ok) {\n        setResources(data);\n        setError('');\n        setProfession(data.profession);\n      } else {\n        setError(data.message || 'Failed to fetch resources');\n      }\n    } catch (error) {\n      console.error('Error fetching resources:', error);\n      setError('Network error');\n    }\n  };\n  useEffect(() => {\n    // Fetch user data (profession, resources) when component mounts\n    fetchUserData();\n  }, [userId]); // Run only when userId changes\n\n  const handleProfessionChange = async newProfession => {\n    try {\n      const response = await fetch('http://localhost:4000/game/change-profession', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          profession: newProfession\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setProfession(data.profession);\n        setmess(data.message);\n        setError('');\n      } else {\n        setError(data.message || 'Failed to change profession');\n      }\n    } catch (error) {\n      console.error('Error changing profession:', error);\n      setError('Network error');\n    }\n  };\n  const handleGoldExchange = async (resourceType, amount) => {\n    try {\n      const response = await fetch('http://localhost:4000/game/gold-exchange', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          resource: resourceType,\n          quantity: amount\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Failed to exchange gold');\n      } else {\n        setResources(data);\n        setmess(data.message);\n        setError('');\n      }\n    } catch (error) {\n      console.error('Error exchanging gold:', error);\n      setError('Network error');\n    }\n  };\n  const Levelbutton = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/game/levelup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        fetchUserData();\n        setmess(data.message);\n        setError('');\n      } else {\n        setError(data.message || 'Failed to level up');\n      }\n    } catch (error) {\n      console.error('Error Leveling up:', error);\n      setError('Network effrror');\n    }\n  };\n  const Gainbutton = async () => {\n    pushed++;\n    if (pushed >= 3) {\n      pushed = 0;\n      try {\n        const response = await fetch('http://localhost:4000/game/gain-resources', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            userId\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          fetchUserData();\n          setmess(data.message);\n          setError('');\n        } else {\n          setError(data.message || 'Failed to gain resources');\n        }\n      } catch (error) {\n        console.error('Error fetching resources:', error);\n        setError('Network effrror');\n      }\n    }\n  };\n  const handleSell = async (Wood_, WoodPraice_, Iron_, IronPraice_, Bread_, BreadPraice_) => {\n    try {\n      const response = await fetch('http://localhost:4000/game/sell', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          resource1: Iron_,\n          resource1Praice: IronPraice_,\n          resource2: Bread_,\n          resource2Praice: BreadPraice_,\n          resource3: Wood_,\n          resource3Praice: WoodPraice_\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Failed to make are position');\n      } else {\n        fetchUserData();\n        setmess(data.message);\n        setError('');\n      }\n    } catch (error) {\n      console.error('Error making position:', error);\n      setError('Network error');\n    }\n  };\n  const handleBuy = async (sellerId, Type) => {\n    try {\n      const response = await fetch('http://localhost:4000/game/Buy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userId,\n          sellerId: sellerId,\n          resourcetype: Type\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.message || 'Failed to make are position');\n      } else {\n        fetchUserData();\n        setmess(data.message);\n        setError('');\n      }\n    } catch (error) {\n      console.error('Error making position:', error);\n      setError('Network error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 23\n    }, this), mess && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Level: \", resources.level, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: Levelbutton,\n        children: \"Level Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 41\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"level up cost \", 2 ** resources.level, \" of each resorce\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Profession: \", profession || 'Unemployed']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Gold: \", resources.resource0.toFixed(1)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Iron: \", resources.resource1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Bread: \", resources.resource2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Wood: \", resources.resource3]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn\",\n      onClick: Gainbutton,\n      children: \"\\u0434\\u043E\\u0431\\u044B\\u0442\\u044C \\u0440\\u0435\\u0441\\u0443\\u0440\\u0441\\u044B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProfessionSelection, {\n      onChangeProfession: handleProfessionChange,\n      prof: profession,\n      level: resources.level\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GoldExchange, {\n      onGoldExchange: handleGoldExchange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Sell, {\n      onSell: handleSell,\n      userId: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TradeList, {\n      Buy: true,\n      onBuy: handleBuy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n}\n_s(GameScreen, \"NIEGcdByrkAPrNF5XIVIhkZDy2Y=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfessionSelection","GoldExchange","Sell","Buy","TradeList","jsxDEV","_jsxDEV","GameScreen","userId","_s","profession","setProfession","resources","setResources","level","resource0","resource1","resource2","resource3","error","setError","mess","setmess","pushed","fetchUserData","response","fetch","data","json","ok","message","console","handleProfessionChange","newProfession","method","headers","body","JSON","stringify","handleGoldExchange","resourceType","amount","resource","quantity","Levelbutton","Gainbutton","handleSell","Wood_","WoodPraice_","Iron_","IronPraice_","Bread_","BreadPraice_","resource1Praice","resource2Praice","resource3Praice","handleBuy","sellerId","Type","resourcetype","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","type","className","onClick","toFixed","onChangeProfession","prof","onGoldExchange","onSell","onBuy","_c","$RefreshReg$"],"sources":["/Users/magomed/WebstormProjects/MMOGameMAI/client/src/GameScreen.js"],"sourcesContent":["\n// client/src/GameScreen.js\nimport React, {useState, useEffect, useRef} from 'react';\nimport ProfessionSelection from './ProfessionSelection';\nimport GoldExchange from \"./GoldExchange\";\nimport Sell from \"./Sell\";\nimport Buy from \"./Buy\";\nimport TradeList from \"./TradeList\";\n\nfunction GameScreen({ userId }) {\n    const [profession, setProfession] = useState('');\n    const [resources, setResources] = useState({ level: 0,resource0: 0,resource1: 0, resource2: 0, resource3: 0});\n    const [error, setError] = useState('');\n    const [mess, setmess] = useState('');\n\n    let pushed = 0;\n\n    const fetchUserData = async () => {\n        try {\n            const response = await fetch(`http://localhost:4000/game/resources/${userId}`);\n            const data = await response.json();\n\n            if (response.ok) {\n                setResources(data);\n                setError('')\n                setProfession(data.profession);\n            } else {\n                setError(data.message || 'Failed to fetch resources');\n            }\n        } catch (error) {\n            console.error('Error fetching resources:', error);\n            setError('Network error');\n        }\n    };\n\n    useEffect(() => {\n        // Fetch user data (profession, resources) when component mounts\n        fetchUserData();\n    }, [userId]); // Run only when userId changes\n\n    const handleProfessionChange = async (newProfession) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/change-profession', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, profession: newProfession })\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                setProfession(data.profession);\n                setmess(data.message)\n                setError('')\n            } else {\n                setError(data.message || 'Failed to change profession');\n            }\n        } catch (error) {\n            console.error('Error changing profession:', error);\n            setError('Network error');\n        }\n    };\n\n    const handleGoldExchange = async (resourceType, amount) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/gold-exchange', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, resource: resourceType, quantity: amount })\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                setError(data.message || 'Failed to exchange gold');\n            }else{\n                setResources(data);\n                setmess(data.message)\n                setError('')\n            }\n        } catch (error) {\n            console.error('Error exchanging gold:', error);\n            setError('Network error');\n        }\n    };\n\n    const Levelbutton = async () => {\n            try {\n                const response = await fetch('http://localhost:4000/game/levelup', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ userId })\n                });\n\n                const data = await response.json();\n                if (response.ok) {\n                    fetchUserData();\n                    setmess(data.message)\n                    setError('')\n                } else {\n                    setError(data.message || 'Failed to level up');\n                }\n            } catch (error) {\n                console.error('Error Leveling up:', error);\n                setError('Network effrror');\n            }\n\n    };\n\n    const Gainbutton = async () => {\n        pushed++;\n        if (pushed >= 3) {\n            pushed=0;\n            try {\n                const response = await fetch('http://localhost:4000/game/gain-resources', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ userId })\n                });\n\n                const data = await response.json();\n                if (response.ok) {\n                    fetchUserData();\n                    setmess(data.message)\n                    setError('')\n                } else {\n                    setError(data.message || 'Failed to gain resources');\n                }\n            } catch (error) {\n                console.error('Error fetching resources:', error);\n                setError('Network effrror');\n            }\n        }\n    };\n    const handleSell = async (Wood_, WoodPraice_, Iron_, IronPraice_, Bread_, BreadPraice_) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/sell', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, resource1: Iron_, resource1Praice: IronPraice_, resource2: Bread_, resource2Praice: BreadPraice_,resource3: Wood_, resource3Praice: WoodPraice_ })\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                setError(data.message || 'Failed to make are position');\n            }else{\n                fetchUserData();\n                setmess(data.message)\n                setError('')\n            }\n        } catch (error) {\n            console.error('Error making position:', error);\n            setError('Network error');\n        }\n    };\n\n    const handleBuy = async (sellerId, Type) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/Buy', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId: userId, sellerId: sellerId,  resourcetype: Type})\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                setError(data.message || 'Failed to make are position');\n            }else{\n                fetchUserData();\n                setmess(data.message)\n                setError('')\n            }\n        } catch (error) {\n            console.error('Error making position:', error);\n            setError('Network error');\n        }\n    };\n\n\n    return (\n        <div>\n            {error && <p style={{color: 'red'}}>{error}</p>}\n            {mess && <p>{mess}</p>}\n            <p>User ID: {userId}</p>\n            <p>Level: {resources.level} <button type=\"button\" className=\"btn\" onClick={Levelbutton}>Level Up</button></p>\n            <p>level up cost {2**resources.level} of each resorce</p>\n            <p>Profession: {profession || 'Unemployed'}</p>\n            <p>Gold: {resources.resource0.toFixed(1)}</p>\n            <p>Iron: {resources.resource1}</p>\n            <p>Bread: {resources.resource2}</p>\n            <p>Wood: {resources.resource3}</p>\n            <button type=\"button\" className=\"btn\" onClick={Gainbutton}>добыть ресурсы</button>\n            <ProfessionSelection onChangeProfession={handleProfessionChange} prof={profession} level={resources.level} />\n            <GoldExchange onGoldExchange={handleGoldExchange}/>\n            <Sell onSell={handleSell} userId={userId}  />\n            <TradeList Buy onBuy={handleBuy}/>\n\n        </div>\n    );\n}\n\nexport default GameScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}