{"ast":null,"code":"// client/src/GameScreen.js\nimport React,{useState,useEffect,useRef}from'react';import ProfessionSelection from'./ProfessionSelection';import GoldExchange from\"./GoldExchange\";import Sell from\"./Sell\";import Buy from\"./Buy\";import TradeList from\"./TradeList\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function GameScreen(_ref){let{userId}=_ref;const[profession,setProfession]=useState('');const[resources,setResources]=useState({level:0,resource0:0,resource1:0,resource2:0,resource3:0});const[error,setError]=useState('');const[mess,setmess]=useState('');let pushed=0;const fetchUserData=async()=>{try{const response=await fetch(`http://localhost:4000/game/resources/${userId}`);const data=await response.json();if(response.ok){setResources(data);setError('');setProfession(data.profession);}else{setError(data.message||'Failed to fetch resources');}}catch(error){console.error('Error fetching resources:',error);setError('Network error');}};useEffect(()=>{fetchUserData();},[userId]);// не вставлчть fetch в deps, оно долбанется\nconst handleProfessionChange=async newProfession=>{try{const response=await fetch('http://localhost:4000/game/change-profession',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId,profession:newProfession})});const data=await response.json();if(response.ok){setProfession(data.profession);setmess(data.message);setError('');}else{setError(data.message||'Failed to change profession');}}catch(error){console.error('Error changing profession:',error);setError('Network error');}};const handleGoldExchange=async(resourceType,amount)=>{try{const response=await fetch('http://localhost:4000/game/gold-exchange',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId,resource:resourceType,quantity:amount})});const data=await response.json();if(!response.ok){setError(data.message||'Failed to exchange gold');}else{setResources(data);setmess(data.message);setError('');}}catch(error){console.error('Error exchanging gold:',error);setError('Network error');}};const Levelbutton=async()=>{try{const response=await fetch('http://localhost:4000/game/levelup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId})});const data=await response.json();if(response.ok){fetchUserData();setmess(data.message);setError('');}else{setError(data.message||'Failed to level up');}}catch(error){console.error('Error Leveling up:',error);setError('Network effrror');}};const Gainbutton=async()=>{pushed++;if(pushed>=3){pushed=0;try{const response=await fetch('http://localhost:4000/game/gain-resources',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId})});const data=await response.json();if(response.ok){fetchUserData();setmess(data.message);setError('');}else{setError(data.message||'Failed to gain resources');}}catch(error){console.error('Error fetching resources:',error);setError('Network effrror');}}};const handleSell=async(Wood_,WoodPraice_,Iron_,IronPraice_,Bread_,BreadPraice_)=>{try{const response=await fetch('http://localhost:4000/game/sell',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId,resource1:Iron_,resource1Praice:IronPraice_,resource2:Bread_,resource2Praice:BreadPraice_,resource3:Wood_,resource3Praice:WoodPraice_})});const data=await response.json();if(!response.ok){setError(data.message||'Failed to make are position');}else{fetchUserData();setmess(data.message);setError('');}}catch(error){console.error('Error making position:',error);setError('Network error');}};const handleBuy=async(sellerId,Type)=>{try{const response=await fetch('http://localhost:4000/game/Buy',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({userId:userId,sellerId:sellerId,resourcetype:Type})});const data=await response.json();if(!response.ok){setError(data.message||'Failed to make are position');}else{fetchUserData();setmess(data.message);setError('');}}catch(error){console.error('Error making position:',error);setError('Network error');}};return/*#__PURE__*/_jsxs(\"div\",{children:[mess&&/*#__PURE__*/_jsx(\"h3\",{children:mess}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',gap:'20px'},children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsxs(\"div\",{children:[error&&/*#__PURE__*/_jsx(\"p\",{style:{color:'red'},children:error}),/*#__PURE__*/_jsxs(\"p\",{children:[\"User ID: \",userId]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Level: \",resources.level,\" \",/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn\",onClick:Levelbutton,children:\"Level Up\"})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"level up cost \",2**resources.level,\" of each resorce\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Profession: \",profession||'Unemployed']}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Gold: \",resources.resource0.toFixed(1)]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Iron: \",resources.resource1]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Bread: \",resources.resource2]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Wood: \",resources.resource3]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:\"btn\",onClick:Gainbutton,children:\"gain resource\"}),/*#__PURE__*/_jsx(ProfessionSelection,{onChangeProfession:handleProfessionChange,prof:profession,level:resources.level}),/*#__PURE__*/_jsx(GoldExchange,{onGoldExchange:handleGoldExchange})]}),/*#__PURE__*/_jsxs(\"div\",{style:{width:'500px',display:'flex',flexDirection:'column',gap:'20px'},children:[/*#__PURE__*/_jsx(Sell,{onSell:handleSell,userId:userId}),/*#__PURE__*/_jsx(Buy,{onBuy:handleBuy}),/*#__PURE__*/_jsx(TradeList,{})]})]})]});}export default GameScreen;","map":{"version":3,"names":["React","useState","useEffect","useRef","ProfessionSelection","GoldExchange","Sell","Buy","TradeList","jsx","_jsx","jsxs","_jsxs","GameScreen","_ref","userId","profession","setProfession","resources","setResources","level","resource0","resource1","resource2","resource3","error","setError","mess","setmess","pushed","fetchUserData","response","fetch","data","json","ok","message","console","handleProfessionChange","newProfession","method","headers","body","JSON","stringify","handleGoldExchange","resourceType","amount","resource","quantity","Levelbutton","Gainbutton","handleSell","Wood_","WoodPraice_","Iron_","IronPraice_","Bread_","BreadPraice_","resource1Praice","resource2Praice","resource3Praice","handleBuy","sellerId","Type","resourcetype","children","style","display","gap","color","type","className","onClick","toFixed","onChangeProfession","prof","onGoldExchange","width","flexDirection","onSell","onBuy"],"sources":["/Users/magomed/WebstormProjects/MMOGameMAI/client/src/GameScreen.js"],"sourcesContent":["// client/src/GameScreen.js\nimport React, {useState, useEffect, useRef} from 'react';\nimport ProfessionSelection from './ProfessionSelection';\nimport GoldExchange from \"./GoldExchange\";\nimport Sell from \"./Sell\";\nimport Buy from \"./Buy\";\nimport TradeList from \"./TradeList\";\n\nfunction GameScreen({ userId }) {\n    const [profession, setProfession] = useState('');\n    const [resources, setResources] = useState({ level: 0,resource0: 0,resource1: 0, resource2: 0, resource3: 0});\n    const [error, setError] = useState('');\n    const [mess, setmess] = useState('');\n\n    let pushed = 0;\n\n    const fetchUserData = async () => {\n        try {\n            const response = await fetch(`http://localhost:4000/game/resources/${userId}`);\n            const data = await response.json();\n\n            if (response.ok) {\n                setResources(data);\n                setError('')\n                setProfession(data.profession);\n            } else {\n                setError(data.message || 'Failed to fetch resources');\n            }\n        } catch (error) {\n            console.error('Error fetching resources:', error);\n            setError('Network error');\n        }\n    };\n\n    useEffect(() => {\n        fetchUserData();\n    }, [userId]); // не вставлчть fetch в deps, оно долбанется\n\n    const handleProfessionChange = async (newProfession) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/change-profession', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, profession: newProfession })\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                setProfession(data.profession);\n                setmess(data.message)\n                setError('')\n            } else {\n                setError(data.message || 'Failed to change profession');\n            }\n        } catch (error) {\n            console.error('Error changing profession:', error);\n            setError('Network error');\n        }\n    };\n\n    const handleGoldExchange = async (resourceType, amount) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/gold-exchange', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, resource: resourceType, quantity: amount })\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                setError(data.message || 'Failed to exchange gold');\n            }else{\n                setResources(data);\n                setmess(data.message)\n                setError('')\n            }\n        } catch (error) {\n            console.error('Error exchanging gold:', error);\n            setError('Network error');\n        }\n    };\n\n    const Levelbutton = async () => {\n            try {\n                const response = await fetch('http://localhost:4000/game/levelup', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ userId })\n                });\n\n                const data = await response.json();\n                if (response.ok) {\n                    fetchUserData();\n                    setmess(data.message)\n                    setError('')\n                } else {\n                    setError(data.message || 'Failed to level up');\n                }\n            } catch (error) {\n                console.error('Error Leveling up:', error);\n                setError('Network effrror');\n            }\n\n    };\n\n    const Gainbutton = async () => {\n        pushed++;\n        if (pushed >= 3) {\n            pushed=0;\n            try {\n                const response = await fetch('http://localhost:4000/game/gain-resources', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ userId })\n                });\n\n                const data = await response.json();\n                if (response.ok) {\n                    fetchUserData();\n                    setmess(data.message)\n                    setError('')\n                } else {\n                    setError(data.message || 'Failed to gain resources');\n                }\n            } catch (error) {\n                console.error('Error fetching resources:', error);\n                setError('Network effrror');\n            }\n        }\n    };\n    const handleSell = async (Wood_, WoodPraice_, Iron_, IronPraice_, Bread_, BreadPraice_) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/sell', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, resource1: Iron_, resource1Praice: IronPraice_, resource2: Bread_, resource2Praice: BreadPraice_,resource3: Wood_, resource3Praice: WoodPraice_ })\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                setError(data.message || 'Failed to make are position');\n            }else{\n                fetchUserData();\n                setmess(data.message)\n                setError('')\n            }\n        } catch (error) {\n            console.error('Error making position:', error);\n            setError('Network error');\n        }\n    };\n\n    const handleBuy = async (sellerId, Type) => {\n        try {\n            const response = await fetch('http://localhost:4000/game/Buy', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId: userId, sellerId: sellerId,  resourcetype: Type})\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                setError(data.message || 'Failed to make are position');\n            }else{\n                fetchUserData();\n                setmess(data.message)\n                setError('')\n            }\n        } catch (error) {\n            console.error('Error making position:', error);\n            setError('Network error');\n        }\n    };\n\n\n    return (\n        <div>\n            {mess && <h3>{mess}</h3>}\n        <div style={{ display: 'flex', gap: '20px' }}>\n            <div></div>\n            <div>\n                {error && <p style={{color: 'red'}}>{error}</p>}\n                <p>User ID: {userId}</p>\n                <p>Level: {resources.level} <button type=\"button\" className=\"btn\" onClick={Levelbutton}>Level Up</button></p>\n                <p>level up cost {2**resources.level} of each resorce</p>\n                <p>Profession: {profession || 'Unemployed'}</p>\n                <p>Gold: {resources.resource0.toFixed(1)}</p>\n                <p>Iron: {resources.resource1}</p>\n                <p>Bread: {resources.resource2}</p>\n                <p>Wood: {resources.resource3}</p>\n                <button type=\"button\" className=\"btn\" onClick={Gainbutton}>gain resource</button>\n                <ProfessionSelection onChangeProfession={handleProfessionChange} prof={profession} level={resources.level} />\n                <GoldExchange onGoldExchange={handleGoldExchange}/>\n            </div>\n            <div style={{ width: '500px', display: 'flex', flexDirection: 'column', gap: '20px' }}>\n                <Sell onSell={handleSell} userId={userId} />\n                <Buy onBuy={handleBuy} />\n                <TradeList />\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default GameScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}