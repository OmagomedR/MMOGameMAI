{"ast":null,"code":"var _jsxFileName = \"/Users/magomed/WebstormProjects/MMOGameMAI/client/src/GameScreen.js\",\n  _s = $RefreshSig$();\n// client/src/GameScreen.js\nimport React, { useState, useEffect } from 'react';\nimport ProfessionSelection from './ProfessionSelection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameScreen({\n  userId\n}) {\n  _s();\n  const [profession, setProfession] = useState('');\n  const [resources, setResources] = useState({\n    resource1: 0,\n    resource2: 0\n  });\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Fetch user data (profession, resources) when component mounts\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/game/resources/${userId}`);\n        const data = await response.json();\n        if (response.ok) {\n          setResources(data);\n        } else {\n          setError(data.message || 'Failed to fetch resources');\n        }\n      } catch (error) {\n        console.error('Error fetching resources:', error);\n        setError('Network error');\n      }\n    };\n    fetchUserData();\n  }, [userId]); // Run only when userId changes\n\n  const handleProfessionChange = async newProfession => {\n    try {\n      const response = await fetch('http://localhost:3000/game/change-profession', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          profession: newProfession\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setProfession(data.profession);\n      } else {\n        setError(data.message || 'Failed to change profession');\n      }\n    } catch (error) {\n      console.error('Error changing profession:', error);\n      setError('Network error');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Screen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"User ID: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Profession: \", profession || 'Unemployed']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Resource 1: \", resources.resource1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Resource 2: \", resources.resource2]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProfessionSelection, {\n      onChangeProfession: handleProfessionChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(GameScreen, \"xdwJi1IhbRgJSqVvsfiJZkXsfdE=\");\n_c = GameScreen;\nexport default GameScreen;\nvar _c;\n$RefreshReg$(_c, \"GameScreen\");","map":{"version":3,"names":["React","useState","useEffect","ProfessionSelection","jsxDEV","_jsxDEV","GameScreen","userId","_s","profession","setProfession","resources","setResources","resource1","resource2","error","setError","fetchUserData","response","fetch","data","json","ok","message","console","handleProfessionChange","newProfession","method","headers","body","JSON","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onChangeProfession","_c","$RefreshReg$"],"sources":["/Users/magomed/WebstormProjects/MMOGameMAI/client/src/GameScreen.js"],"sourcesContent":["// client/src/GameScreen.js\nimport React, { useState, useEffect } from 'react';\nimport ProfessionSelection from './ProfessionSelection';\n\nfunction GameScreen({ userId }) {\n    const [profession, setProfession] = useState('');\n    const [resources, setResources] = useState({ resource1: 0, resource2: 0 });\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        // Fetch user data (profession, resources) when component mounts\n        const fetchUserData = async () => {\n            try {\n                const response = await fetch(`http://localhost:5000/game/resources/${userId}`);\n                const data = await response.json();\n\n                if (response.ok) {\n                    setResources(data);\n                } else {\n                    setError(data.message || 'Failed to fetch resources');\n                }\n            } catch (error) {\n                console.error('Error fetching resources:', error);\n                setError('Network error');\n            }\n        };\n\n        fetchUserData();\n    }, [userId]); // Run only when userId changes\n\n    const handleProfessionChange = async (newProfession) => {\n        try {\n            const response = await fetch('http://localhost:3000/game/change-profession', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ userId, profession: newProfession })\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                setProfession(data.profession);\n            } else {\n                setError(data.message || 'Failed to change profession');\n            }\n        } catch (error) {\n            console.error('Error changing profession:', error);\n            setError('Network error');\n        }\n    };\n\n    return (\n        <div>\n            <h2>Game Screen</h2>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <p>User ID: {userId}</p>\n            <p>Profession: {profession || 'Unemployed'}</p>\n            <p>Resource 1: {resources.resource1}</p>\n            <p>Resource 2: {resources.resource2}</p>\n\n            <ProfessionSelection onChangeProfession={handleProfessionChange} />\n        </div>\n    );\n}\n\nexport default GameScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}